# -*- coding: utf-8 -*-
"""CursoDadosUdemy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upFUIro92wv7H9bTtUlLyPeTVY1uTFFX

#Curso de Dados Udemy

##Sétima Seção - Prática em Python

###Variáveis e Objetos
"""

x = 1
print(x)

y = 3.13
print(y)

m = "Python"
m = 'Python'
print(m)

w = True
y = False
print(y)

x = 10
y = 20
z = 100
w = ( (x+y) * z) /100
print(w)

print("Este texto será impresso no console")
print(x)
print("Texto e duas variáveis", x , ",",z)

print(type(x))
print(type(m))

print("Informe o valor:")
i = input()
print(type(i))

print("Informe o valor:")
i = input()
# i = input("Informe o valor: ")

#Converter para inteiro
var = input("Informe o valor:")
print(type(var))
var = int(var)
print(type(var))

#Converter para float
var = input("Informe o valor:")
print(type(var))
var = float(var)
print(type(var))

"""###Estrutura de Condição"""

nota = 7
if(nota >= 6):
  print("Aprovado")
elif(nota == 5):
  print("Recuperação")
else:
  print("Reprovado")

"""###Estrutura de Repetição"""

count = 1
while count <= 5:
  print(count)
  count += 1

for n in range(0,10):
  print(n+1)

for n in range(0,11):
  print(n)

"""###Listas"""

lst = [1,2,3,4,5]
print(lst)

lst2 = [1,2,3,"4",True]
print(lst2)

lst3 = [12,[1,2,3,4,5],"a"]
print(lst3)

lst4 = list(range(0,10))
print(lst4)

print(len(lst))

print(lst[0])

for n in range(0,len(lst4)):
  print(lst4[n]+1)

"""###Dicionários,Sets e Tuplas"""

Notas = {'João':6.0,'Maria':8.0,'Pedro':6.5}
print(Notas)
print(Notas['João'])

Notas.keys()
Notas.values()

print('João' in Notas)
print('Fernando' in Notas)

del Notas['João']
print(Notas)

Notas['Ana'] = 9
print(Notas)

Notas.get('Geraldo',"Não encontrado!")

bigdata = {'Spark','Hive','Sqoop'}
print(bigdata)

bigdata.add('Hadoop')
print(len(bigdata))

"""###Funções"""

def imprime():
  print("esta é uma função")

imprime()

print("====================================")

def imprime(n):
  print(n)

imprime("Novo conteúdo")

print("====================================")

def potencia(n):
  return n * n

x = potencia(4)
print(x)

print("====================================")

def intervalo(inic = 1,fim=10):
  for inic in range(1,fim+1):
    print(inic)

x = intervalo(1,10)
y = intervalo()

print("====================================")

print(abs(-200))
lst = [1,2,30,35,40]
print(max(lst))
print(min(lst))
print(sum(lst))

"""###Módulos e Pacotes"""

import statistics

z = [10,20,30,40]
x = statistics.mean(z)
y =  statistics.median(z)

print(x,y)

import statistics as est

z = [10,20,30,40]
x = est.mean(z)
y =  est.median(z)

print(x,y)

from statistics import mean,median
z = [10,20,30,40]
x = mean(z)
y = median(z)
print(x,y)

from statistics import *
z = [10,20,30,40,50]
x = mean(z)
y = median(z)
print(x,y)

"""###Numpy"""

import numpy as np

#cria uma matriz unidimensional
mt = np.array([12,34,26,18,10])
print(mt)
print(type(mt))

print("====================================")

#cria o array com um tipo específico
mtfloat = np.array([1,2,3],dtype = np.float64)
print(mtfloat)
print(type(mtfloat))
mtint = np.array([1,2,3],dtype = np.int32)
print(mtint)
print(type(mtint))

print("====================================")

#mudar o tipo do array
#transformar tipos de dados de arrays
mtnew = np.array([1.4,3.6,-5.1,9.42,4.99999])
print(mtnew)

#transformamos de float para int os valores são trucados
mtnewint = mtnew.astype(np.int32)
print(mtnewint)

print("====================================")

#inverso
mt5 = np.array([1,2,3,4])
print(mt5)
mt6 = mt5.astype(float)
print(mt6)

#mais de uma dimensão
#cria um matriz bidimesional
mt7 = np.array([[7,2,23],[12,27,4],[5,34,23]])
print(mt7)

print("====================================")

vazio = np.empty([3,2],dtype=int)
print(vazio)
print("-------")
#cria uma matriz 4x3 com valores zero
zeros = np.zeros([4,3])
print(zeros)

#com valores igual a um
um = np.ones([5,7])
print(um)

#cria matriz quadrada com diagonal principal com valores 1 e os outros valores zero
diagonal = np.eye(5)
print(diagonal)

print("====================================")

m = np.array([1,2,3,4,5,6])
print(m[1])

print(m[0:2])

print(m[1:])

print(m[-3:])

"""###Pandas"""

import pandas as pd

#carrega arquivo para dataframe Pandas
dados = pd.read_csv("Credit.csv")
#formato
dados.shape

#resumo estatístico de colunas numéricas
dados.describe()

#primeiros registros
dados.head()

#últimos registros, com parâmetros
dados.tail(2)

#filtras por nome da coluna
dados[["duration"]]

#filtrar linhas por indice
dados.loc[1:3]

#linhas 1 e 3
dados.loc[[1,3]]

#filtro
dados.loc[dados['purpose'] == "radio/tv"]

#outra condição
dados.loc[dados['credit_amount'] >  18000]

#atribuimos resultado a variável, criando outro df
credito2 = dados.loc[dados['credit_amount'] >  18000]
print(credito2)

#definimos só algumas colunas
credito3 = dados[['checking_status','duration']].loc[dados['credit_amount'] >  18000]
print(credito3)

#séries, única coluna
# pode ser criada a partir de listas, array do numpy ou coluna de data frame
s1 = pd.Series([2,5,3,34,54,23,1,16])
print(s1)

#serie a partir de um array do numpy
import numpy as np
array1 = np.array([2,5,3,34,54,23,1,16])
s2 = pd.Series(array1)
print(s2)

#series a partir de um dataframe
s3 = dados['purpose']
print(s3)
type(s3)

#note a diferença, temos um data frame
d4= dados[['purpose']]
type(d4)

#renomear
dados.rename(columns={"duration":"duração","purpose":"propósito"})

#porém a alteração não é persistida
dados.head(1)

#para persistir
dados.rename(columns={"duration":"duração","purpose":"propósito"},inplace=True)

#excluir coluna
dados.drop('checking_status',axis=1,inplace=True)
print(dados)

#verificar dados nulos
dados.isnull()

#verificar dados nulos
dados.isnull().sum()

#preencher dados faltantes
dados['duração'].fillna(0,inplace = True)

#iloc
dados.iloc[0:3,0:5]

dados.iloc[[0,1,2,3,7],0:5]